######格式说明：（文件需要以UTF-8格式编码，推荐notepad++编辑和转换编码）
######每道题第一行应至少以6个#号开头（"######"），
######第二行用3个*号开头("***")表示该题所属章节或知识点
######第三行开始用数字开头（数字表示题号，是多少无所谓）表示简答题题题干描述，可以为多行

###### 注意，题干的第二行开始开头不能再用字母或数字（因已经被题干的首字符占用）
######题干结束后的一行，以三个>号开头（">>>"）表示答案，多个答案用空格分割；

#######在有可能引起歧义的情况下（例如答案中本身含有逗号），题干可采用第二种形式，
#######即在题干中包含答案，答案用<<<和>>>包围，此时不应有专门的答案行。
######所有题结束后最后一行应至少以6个#号开头（"######"），后续不能有空行！

######
***算法
1．	用Java实现快排算法。
>>>快排
######
***算法
2．	给你一个二进制数组 nums 。
你可以对数组执行以下操作 任意 次（也可以 0 次）：
选择数组中 任意连续 3 个元素，并将它们 全部反转 。
反转 一个元素指的是将它的值从 0 变 1 ，或者从 1 变 0 。
请你返回将 nums 中所有元素变为 1 的 最少 操作次数。如果无法全部变成 1 ，返回 -1 。
>>>答案
######
***算法
3, 给你一个整数数组 matches 其中 matches[i] = [winneri, loseri] 表示在一场比赛中 winneri 击败了 loseri 。
返回一个长度为 2 的列表 answer ：
answer[0] 是所有 没有 输掉任何比赛的玩家列表。
answer[1] 是所有恰好输掉 一场 比赛的玩家列表。
两个列表中的值都应该按 递增 顺序返回。
注意：
只考虑那些参与 至少一场 比赛的玩家。
生成的测试用例保证 不存在 两场比赛结果 相同 。
>>>答案
######